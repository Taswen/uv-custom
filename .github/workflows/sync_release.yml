name: Sync UV Release

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Get latest uv release version
        id: get_uv_version
        run: |
          LATEST_UV_JSON=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/astral-sh/uv/releases/latest)
          LATEST_UV_TAG=$(echo "$LATEST_UV_JSON" | jq -r .tag_name)
          LATEST_UV_NOTES=$(echo "$LATEST_UV_JSON" | jq -r .body)
          echo "tag=$LATEST_UV_TAG" >> $GITHUB_OUTPUT
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_UV_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get latest local release version
        id: get_local_version
        run: |
          LATEST_LOCAL_TAG=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "tag=$LATEST_LOCAL_TAG" >> $GITHUB_OUTPUT

      - name: Compare versions and decide to proceed
        id: compare_versions
        run: |
          echo "Latest uv release: ${{ steps.get_uv_version.outputs.tag }}"
          echo "Latest local release: ${{ steps.get_local_version.outputs.tag }}"
          if [ "${{ steps.get_uv_version.outputs.tag }}" = "${{ steps.get_local_version.outputs.tag }}" ]; then
            echo "Versions are the same. No new release needed."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected. Proceeding with release."
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.compare_versions.outputs.proceed == 'true'
        uses: actions/checkout@v4

      - name: Generate custom installers
        if: steps.compare_versions.outputs.proceed == 'true'
        run: |
          chmod +x ./create_custom_uv_installer.sh
          ./create_custom_uv_installer.sh ${{ steps.get_uv_version.outputs.tag }}

      - name: Create new release
        if: steps.compare_versions.outputs.proceed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ steps.get_uv_version.outputs.tag }}
          REPO_URL: "https://github.com/${{ github.repository }}"
        run: |
          # Generate custom release notes
          cat > release_notes.md <<EOF
          ## 🚀 uv 国内加速版

          这是一个与 uv 官方版本 **[$RELEASE_TAG](https://github.com/astral-sh/uv/releases/tag/$RELEASE_TAG)** 同步的镜像版本，为国内用户提供了以下优化：

          - **下载加速**：所有uv可执行程序的 GitHub 下载链接均通过镜像代理，大幅提升下载速度。
          - **预设镜像**：自动为您配置清华大学 PyPI 镜像和 Github 代理的 Python 构建镜像。

          ---

          ### 快速安装

          请根据您的操作系统，在终端中运行以下对应的一键安装命令：

          #### macOS / Linux
          \`\`\`sh
          curl -LsSf $REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.sh | sh
          \`\`\`

          #### Windows (PowerShell)
          \`\`\`powershell
          powershell -ExecutionPolicy Bypass -c "irm $REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.ps1 | iex"
          \`\`\`

          ---

          ### (可选) 配置 Conda/Mamba 环境联动

          如果您希望 \`uv\` 能够自动识别并管理当前激活的 Conda/Mamba 环境，可以运行以下对应的脚本来配置 Shell 钩子。

          #### macOS / Linux
          \`\`\`sh
          curl -LsSf $REPO_URL/releases/download/$RELEASE_TAG/setup_hooks.sh | sh
          \`\`\`

          #### Windows (PowerShell)
          \`\`\`powershell
          powershell -ExecutionPolicy Bypass -c "irm $REPO_URL/releases/download/$RELEASE_TAG/setup_hooks.ps1 | iex"
          \`\`\`
          EOF

          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_TAG" \
            --notes-file release_notes.md \
            uv-installer-custom.sh \
            uv-installer-custom.ps1 \
            setup_hooks.sh \
            setup_hooks.ps1