name: Sync UV Release to GitHub & Gitee

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  check_for_updates:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.compare_versions.outputs.proceed }}
      new_tag: ${{ steps.get_uv_version.outputs.tag }}
    steps:
      - name: Get latest uv release version
        id: get_uv_version
        run: |
          LATEST_UV_JSON=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/astral-sh/uv/releases/latest)
          LATEST_UV_TAG=$(echo "$LATEST_UV_JSON" | jq -r .tag_name)
          echo "tag=$LATEST_UV_TAG" >> $GITHUB_OUTPUT

      - name: Get latest GitHub local release version
        id: get_local_version
        run: |
          LATEST_LOCAL_TAG=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "tag=$LATEST_LOCAL_TAG" >> $GITHUB_OUTPUT

      - name: Compare versions and decide to proceed
        id: compare_versions
        run: |
          echo "Latest uv release: ${{ steps.get_uv_version.outputs.tag }}"
          echo "Latest local release: ${{ steps.get_local_version.outputs.tag }}"
          if [ "${{ steps.get_uv_version.outputs.tag }}" = "${{ steps.get_local_version.outputs.tag }}" ]; then
            echo "Versions are the same. No new release needed."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected. Proceeding with release."
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

  create_releases:
    needs: check_for_updates
    if: needs.check_for_updates.outputs.proceed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate custom installers
        run: |
          chmod +x ./create_custom_uv_installer.sh
          ./create_custom_uv_installer.sh ${{ needs.check_for_updates.outputs.new_tag }}

      - name: Generate Release Notes
        id: generate_notes
        run: |
          RELEASE_TAG="${{ needs.check_for_updates.outputs.new_tag }}"
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}"
          GITEE_REPO_URL="https://gitee.com/wangnov/uv-mirror" # Replace with your Gitee repo URL

          # Notes for GitHub (Gitee is primary)
          cat > github_notes.md <<EOF
          ## 🚀 uv 国内加速版 (同步自 [$RELEASE_TAG](https://github.com/astral-sh/uv/releases/tag/$RELEASE_TAG))

          **推荐使用 Gitee 源以获得最佳下载速度。**

          ### Gitee (主推)
          \`\`\`sh
          # macOS / Linux
          curl -LsSf $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.sh | sh
          # Windows (PowerShell)
          powershell -ExecutionPolicy Bypass -c "irm $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.ps1 | iex"
          \`\`\`

          ### GitHub (备用)
          \`\`\`sh
          # macOS / Linux
          curl -LsSf $GITHUB_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.sh | sh
          \`\`\`
          EOF

          # Notes for Gitee (Gitee is primary)
          cat > gitee_notes.md <<EOF
          ## 🚀 uv 国内加速版 (同步自 uv官方版本 [$RELEASE_TAG](https://github.com/astral-sh/uv/releases/tag/$RELEASE_TAG))

          这是一个与 uv 官方版本同步的镜像版本，为国内用户提供了以下优化：

          - **下载加速**：所有 GitHub 下载链接均通过镜像代理，大幅提升下载速度。
          - **预设镜像**：自动为您配置清华大学 PyPI 镜像和 Python 构建镜像。

          ---

          ### 快速安装 (Gitee 源)

          请根据您的操作系统，在终端中运行以下对应的一键安装命令：

          #### macOS / Linux
          \`\`\`sh
          curl -LsSf $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.sh | sh
          \`\`\`

          #### Windows (PowerShell)
          \`\`\`powershell
          powershell -ExecutionPolicy Bypass -c "irm $GITEE_REPO_URL/releases/download/$RELEASE_TAG/uv-installer-custom.ps1 | iex"
          \`\`\`

          ---

          ### (可选) 配置 Conda/Mamba 环境联动

          如果您希望 \`uv\` 能够自动识别并管理当前激活的 Conda/Mamba 环境，可以运行以下对应的脚本来配置 Shell 钩子。

          #### macOS / Linux
          \`\`\`sh
          curl -LsSf $GITEE_REPO_URL/releases/download/$RELEASE_TAG/setup_hooks.sh | sh
          \`\`\`

          #### Windows (PowerShell)
          \`\`\`powershell
          powershell -ExecutionPolicy Bypass -c "irm $GITEE_REPO_URL/releases/download/$RELEASE_TAG/setup_hooks.ps1 | iex"
          \`\`\`
          EOF

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ needs.check_for_updates.outputs.new_tag }}" \
            --title "${{ needs.check_for_updates.outputs.new_tag }}" \
            --notes-file github_notes.md \
            uv-installer-custom.sh \
            uv-installer-custom.ps1 \
            setup_hooks.sh \
            setup_hooks.ps1

      - name: Create Gitee Release
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          RELEASE_TAG: ${{ needs.check_for_updates.outputs.new_tag }}
          GITEE_OWNER: "wangnov" # Replace with your Gitee username/org
          GITEE_REPO: "uv-mirror"  # Replace with your Gitee repo name
        run: |
          set -x
          GITEE_NOTES=$(cat gitee_notes.md)

          echo "Creating Gitee Tag..."
          curl -X POST --header 'Content-Type: application/json;charset=UTF-8' "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/tags" \
          -d "{\"access_token\":\"$GITEE_TOKEN\",\"tag_name\":\"$RELEASE_TAG\",\"refs\":\"main\",\"tag_message\":\"Release $RELEASE_TAG\"}"

          echo "Creating Gitee Release..."
          RELEASE_RESPONSE=$(curl -X POST --header 'Content-Type: application/json;charset=UTF-8' "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases" \
          -d "{\"access_token\":\"$GITEE_TOKEN\",\"tag_name\":\"$RELEASE_TAG\",\"name\":\"$RELEASE_TAG\",\"body\":\"$GITEE_NOTES\",\"target_commitish\":\"main\"}")

          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r .id)
          echo "Gitee Release ID: $RELEASE_ID"

          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Failed to create Gitee release or parse its ID."
            echo "Response: $RELEASE_RESPONSE"
            exit 1
          fi

          echo "Uploading assets to Gitee..."
          for asset in uv-installer-custom.sh uv-installer-custom.ps1 setup_hooks.sh setup_hooks.ps1; do
            echo "Uploading $asset..."
            curl -X POST --header "Content-Type: multipart/form-data" \
            -F "access_token=$GITEE_TOKEN" \
            -F "file=@$asset" \
            "https://gitee.com/api/v5/repos/$GITEE_OWNER/$GITEE_REPO/releases/$RELEASE_ID/attach_files"
          done
          echo "All assets uploaded to Gitee."